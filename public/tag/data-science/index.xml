<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Science | Andrej&#39;s thoughts</title>
    <link>https://andleb.netlify.app/tag/data-science/</link>
      <atom:link href="https://andleb.netlify.app/tag/data-science/index.xml" rel="self" type="application/rss+xml" />
    <description>Data Science</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 05 Jan 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://andleb.netlify.app/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>Data Science</title>
      <link>https://andleb.netlify.app/tag/data-science/</link>
    </image>
    
    <item>
      <title>How to call all the functions in a Python file on an object</title>
      <link>https://andleb.netlify.app/post/how-to-call-all-the-functions-in-a-python-file-on-an-object/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://andleb.netlify.app/post/how-to-call-all-the-functions-in-a-python-file-on-an-object/</guid>
      <description>


&lt;p&gt;&lt;em&gt;NOTE: This is a migration of an old post from my previous blog.&lt;/em&gt;
&lt;!-- (https://andleb1.wordpress.com/2020/05/28/how-to-call-all-the-functions-in-a-python-file-on-an-object/)* --&gt;&lt;/p&gt;
&lt;p&gt;Recently, I’ve been playing around with some competitions on Kaggle. Given that an inescapable fact of Machine Learning is &lt;em&gt;Feature Selection&lt;/em&gt;,
I’ve been finding myself in the situation of having to call a dozen or more functions that add synthetic features,
infer missing values, etc., on the same &lt;code&gt;Pandas DataFrame&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following code snippet will call every function in its &lt;code&gt;.py&lt;/code&gt; file but itself on the object,
using tail recursion (nested helper function &lt;code&gt;recCall&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import inspect
import sys
 
import pandas as pd
 
def addAllFeatures(data: pd.DataFrame):
    currFunc  = inspect.getframeinfo(inspect.currentframe()).function
    functions = [obj for name, obj in
                 inspect.getmembers(sys.modules[__name__])
                 if (inspect.isfunction(obj) and name != currFunc)]
 
    def recCall(modifiedData, remFuncs):
        if len(remFuncs) == 0:
            return modifiedData
         
        return recCall(remFuncs[0](modifiedData), remFuncs[1:])
 
    return recCall(data, functions)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this specific example, the general form of the feature-adding functions is:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def addFeature(data: pd.DataFrame, *args, **kwargs):
     
    # add the feature ...
     
    return data&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also notable is the fact that the data gets modified between calls of the recursion;
if your features depend on each other, then the &lt;code&gt;functions&lt;/code&gt; list would need to be in the correct dependency order.
Determining this can, however, quickly become non-trivial.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
